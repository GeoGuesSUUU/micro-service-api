security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: 'auto'
            cost: 15
        App\Entity\User:
            algorithm: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/auth
            stateless: true
            json_login:
                check_path: /api/auth/check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            jwt: ~
        main:
            lazy: true
            provider: app_user_provider


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/auth/check, roles: PUBLIC_ACCESS }
        - { path: ^/api/auth/login, roles: PUBLIC_ACCESS }
        - { path: ^/api.platform$, methods: ['GET'], roles: PUBLIC_ACCESS }
        - { path: ^/api/doc$, methods: ['GET'], roles: PUBLIC_ACCESS }
        - { path: ^/api/doc.json$, methods: ['GET'], roles: PUBLIC_ACCESS }
        # NO AUTH (PUBLIC ACCESS)
        - { path: ^/api.platform/users$, methods: ['POST'], roles: PUBLIC_ACCESS }
        - { path: '^/api/stores/nearest/{zip}$', methods: ['GET'], roles: PUBLIC_ACCESS }
        - { path: '^/api/stores/{id}/products$', methods: ['GET'], roles: PUBLIC_ACCESS }
        - { path: '^/api/stores/{storeId}/products/{productId}$', methods: ['GET'], roles: PUBLIC_ACCESS }
        - { path: '^/api/sellers/{sellerId}/messages/send$', methods: ['POST'], roles: PUBLIC_ACCESS }
        # CLIENT (ROLE_USER)
        - { path: '^/api/stores/{storeId}/commands', methods: [ 'POST' ], roles: ROLE_USER }
        - { path: '^/api/stores/{storeId}/slots$', methods: [ 'GET' ], roles: ROLE_USER }
        - { path: '^/api/stores/{storeId}/slots/{slotId}/booking', methods: [ 'POST' ], roles: ROLE_USER }
        # SELLER (ROLE_SELLER)
        - { path: ^/api/sellers/messages$, methods: [ 'GET' ], roles: ROLE_SELLER }
        - { path: '^/api/sellers/messages/{messageId}$', methods: [ 'GET' ], roles: ROLE_SELLER }
        # ADMIN (ROLE_ADMIN)
        - { path: ^/api.platform, roles: ROLE_ADMIN }
        - { path: '^/api/stores/{storeId}/products/{productId}$', methods: ['POST', 'DELETE'], roles: ROLE_ADMIN }
        - { path: '^/api/users/{userId}/commands/{commandId}$', methods: ['POST'], roles: ROLE_ADMIN }

    role_hierarchy:
        ROLE_SELLER: ROLE_USER
        ROLE_ADMIN: ROLE_SELLER


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
